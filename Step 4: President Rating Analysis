{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "presidents_1617 = pd.read_csv(\"president_monthly_1617.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>President</th>\n",
       "      <th>Month</th>\n",
       "      <th>Approve Rate</th>\n",
       "      <th>Disapprove Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Obama</td>\n",
       "      <td>2016-01-31</td>\n",
       "      <td>47.500000</td>\n",
       "      <td>48.133333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Obama</td>\n",
       "      <td>2016-02-29</td>\n",
       "      <td>47.857143</td>\n",
       "      <td>48.214286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Obama</td>\n",
       "      <td>2016-03-31</td>\n",
       "      <td>50.766667</td>\n",
       "      <td>45.533333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Obama</td>\n",
       "      <td>2016-04-30</td>\n",
       "      <td>50.300000</td>\n",
       "      <td>45.600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Obama</td>\n",
       "      <td>2016-05-31</td>\n",
       "      <td>51.322581</td>\n",
       "      <td>44.580645</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0 President       Month  Approve Rate  Disapprove Rate\n",
       "0           0     Obama  2016-01-31     47.500000        48.133333\n",
       "1           1     Obama  2016-02-29     47.857143        48.214286\n",
       "2           2     Obama  2016-03-31     50.766667        45.533333\n",
       "3           3     Obama  2016-04-30     50.300000        45.600000\n",
       "4           4     Obama  2016-05-31     51.322581        44.580645"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "presidents_1617.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "del presidents_1617[\"Unnamed: 0\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>President</th>\n",
       "      <th>Month</th>\n",
       "      <th>Approve Rate</th>\n",
       "      <th>Disapprove Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Obama</td>\n",
       "      <td>2016-01-31</td>\n",
       "      <td>47.500000</td>\n",
       "      <td>48.133333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Obama</td>\n",
       "      <td>2016-02-29</td>\n",
       "      <td>47.857143</td>\n",
       "      <td>48.214286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Obama</td>\n",
       "      <td>2016-03-31</td>\n",
       "      <td>50.766667</td>\n",
       "      <td>45.533333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Obama</td>\n",
       "      <td>2016-04-30</td>\n",
       "      <td>50.300000</td>\n",
       "      <td>45.600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Obama</td>\n",
       "      <td>2016-05-31</td>\n",
       "      <td>51.322581</td>\n",
       "      <td>44.580645</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  President       Month  Approve Rate  Disapprove Rate\n",
       "0     Obama  2016-01-31     47.500000        48.133333\n",
       "1     Obama  2016-02-29     47.857143        48.214286\n",
       "2     Obama  2016-03-31     50.766667        45.533333\n",
       "3     Obama  2016-04-30     50.300000        45.600000\n",
       "4     Obama  2016-05-31     51.322581        44.580645"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "presidents_1617.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Year_Month</th>\n",
       "      <th>Number of Incidence</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2016-01-31</td>\n",
       "      <td>211470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2016-02-29</td>\n",
       "      <td>198429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2016-03-31</td>\n",
       "      <td>196971</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2016-04-30</td>\n",
       "      <td>180631</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2016-05-31</td>\n",
       "      <td>202397</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  Year_Month  Number of Incidence\n",
       "0           0  2016-01-31               211470\n",
       "1           1  2016-02-29               198429\n",
       "2           2  2016-03-31               196971\n",
       "3           3  2016-04-30               180631\n",
       "4           4  2016-05-31               202397"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "monthly_incidences311 = pd.read_csv(\"df311_monthly_1617.csv\")\n",
    "monthly_incidences311.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "del monthly_incidences311[\"Unnamed: 0\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "del monthly_incidences311[\"Year_Month\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Number of Incidence</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>211470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>198429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>196971</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>180631</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>202397</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Number of Incidence\n",
       "0               211470\n",
       "1               198429\n",
       "2               196971\n",
       "3               180631\n",
       "4               202397"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "monthly_incidences311.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create a new data frame to combine 311 incidences to presidents' rating "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "rating_311_1617 = pd.concat([presidents_1617, monthly_incidences311], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>President</th>\n",
       "      <th>Month</th>\n",
       "      <th>Approve Rate</th>\n",
       "      <th>Disapprove Rate</th>\n",
       "      <th>Number of Incidence</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Obama</td>\n",
       "      <td>2016-01-31</td>\n",
       "      <td>47.500000</td>\n",
       "      <td>48.133333</td>\n",
       "      <td>211470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Obama</td>\n",
       "      <td>2016-02-29</td>\n",
       "      <td>47.857143</td>\n",
       "      <td>48.214286</td>\n",
       "      <td>198429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Obama</td>\n",
       "      <td>2016-03-31</td>\n",
       "      <td>50.766667</td>\n",
       "      <td>45.533333</td>\n",
       "      <td>196971</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Obama</td>\n",
       "      <td>2016-04-30</td>\n",
       "      <td>50.300000</td>\n",
       "      <td>45.600000</td>\n",
       "      <td>180631</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Obama</td>\n",
       "      <td>2016-05-31</td>\n",
       "      <td>51.322581</td>\n",
       "      <td>44.580645</td>\n",
       "      <td>202397</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  President       Month  Approve Rate  Disapprove Rate  Number of Incidence\n",
       "0     Obama  2016-01-31     47.500000        48.133333               211470\n",
       "1     Obama  2016-02-29     47.857143        48.214286               198429\n",
       "2     Obama  2016-03-31     50.766667        45.533333               196971\n",
       "3     Obama  2016-04-30     50.300000        45.600000               180631\n",
       "4     Obama  2016-05-31     51.322581        44.580645               202397"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rating_311_1617.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creat a graph to see if there is any relationship"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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K2VxPnCfmf0ceA24I02/A/hDGiyxkAhkIiLSDFgunQgzGwkMdfe7zKwf0M3d3y946ZpQWVmZl5eXF7sYIiLNiplNdPeyfC1PT54VEZGSoSfPiohIydCTZ0VEpGToybMiIlIy9ORZEREpGbkMCScFIQUiEREpqHUGJTNbyjpuzwPg7j0KUiIREWm11hmU3L07gJldDswB/kDcV+4YNPpOREQKIJeBDvu5+83uvtTdl7j7LcSjLERERPIql6BUaWbHpIfutTGzY4DKQhdMRERan1yC0tHAkcDc9PoW1Q/XExERyZtchoTPIB7yJyIiUlB1jb47z91/bWY3UssoPHc/s6AlExGRVqeuntLk9Fe3zhYRkSZR15Dwf6S/9zRdcUREpDWr95qSmT0NfMvdF6f3vYD73H2/QhdORKQUrFq1ioqKCpYvX17sohRNp06dGDhwIO3bty9oPrncZqhfJiABuPsiM+tfwDKJiJSUiooKunfvzuDBgzGzYhenybk7CxYsoKKigiFDhhQ0r1x/p7Rp5o2ZDaKO2w+JiLQ0y5cvp0+fPq0yIAGYGX369GmSnmIuPaWLgH+b2b/S+/8DTi5ckURESk9rDUgZTbX+9faU3P0JYAfgL8BYYLi7P1nogomISLXly5ez0047se2227LVVltxySWXAHDTTTex2WabYWbMnz//8/mnTJnCiBEj6NixI9dcc02xir3ecnp0BdARWJjm39LMcPdxhSuWiIhk69ixI8899xzdunVj1apVjBw5kgMOOIDddtuNgw8+mD322GON+Xv37s3o0aN58MEHi1PgBspl9N2vgG8DbwFVabIDCkoiIk3EzOjWrRsQowFXrVqFmbH99tvXOn///v3p378/jz76aFMWs9Fy6Sl9Hdjc3VcUujAiIqXurLNg0qT8LnO77eD66+ufr7KykuHDhzN9+nROP/10dt555/wWpATkMvruPaCwA9NFRKRebdu2ZdKkSVRUVDB+/HjefPPNYhcp73LpKX0GTDKzZ4HPe0u6952ItEa59GgKrWfPnuyxxx488cQTbL311sUuTl7lEpQeTi8RESmSefPm0b59e3r27MmyZct45plnOP/884tdrLzL5dEVuvediEiRzZ49m+OOO47Kykqqqqo48sgjOfjggxk9ejS//vWvmTNnDsOGDePAAw/k97//PXPmzKGsrIwlS5bQpk0brr/+et5++2169OhR7FWpk7nXfnMGMxvr7kea2RvU/uiKYYUuXFMqKyvz8nLdEF1E1jZ58mS22GKLYhej6GqrBzOb6O5l+cqjrp7Sj9Lfg/OVmYiISF3qenTF7PT3g6YrjoiItGa5DAkXERFpEgpKIiJSMtYZlNLvkjK3GRIRESm4ugY6DDCzrwKHmtl9wBr3LXf3VwtaMhERaXXqOn33M2AUMBD4DXBt1qv53AddRKQVuf766/nss88+f3/ggQeyePHiOlKUlnUGJXf/m7sfAPza3fes8dqrCcsoIiJZ3J2qqqpaP6sZlB577DF69uzZVEVrtFwe8neFmR1qZtekV06/WzKzO83sIzN7M2tabzN72sympb+90nQzs9FmNt3MXjezHbLSHJfmn2Zmx2VNH25mb6Q0oy09FnFdeYiINGczZsxgiy224Ac/+AE77LADJ510EmVlZWs88G/06NHMmjWLPffckz333BOAwYMHM3/+/M/Tf//732errbZi3333ZdmyZQBMmDCBYcOGMWLECM4999yi3k8vl+cpXQXsBPwpTfqRme3m7hfUk/Ru4Cbg3qxpo4Bn3f2XZjYqvT8fOAAYml47A7cAO5tZb+ASoIy4q8REM3vY3ReleU4GXgYeA/YHHq8jDxGRxivisyumTp3KXXfdxc0338zChQvp3bs3lZWV7L333rz++uuceeaZ/OY3v+H555+nb9++a6WfNm0aY8aM4fbbb+fII4/k/vvv57vf/S4nnHACt912G7vuuiujRo3K77qtp1yGhB8E7OPud7r7ncTO/6D6EqUn0y6sMfkwIHMvvXuIZzVlpt/r4WWgp5kNAPYDnnb3hSkQPQ3snz7r4e4vedwn6d4ay6otDxGRZm3QoEHssssuAIwdO5YddtiB7bffnrfeeou333673vRDhgxhu+22A2D48OHMmDGDxYsXs3TpUnbddVcAjj766MKtQA5yfRx6T6oDzAaNyG/DrDtFzDaz/mn6xsDMrPkq0rS6plfUMr2uPEREGq+Iz67o2rUrAO+//z7XXHMNEyZMoFevXhx//PEsX7683vQdO3b8/P+2bduybNky1nX/02LJpad0FfCamd1tZvcAE4Ff5LkcVss0b8D09cvU7GQzKzez8nnz5q1vchGRoliyZAldu3Zlgw02YO7cuTz++OOff9a9e3eWLl2a87J6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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.plot(rating_311_1617[\"Month\"].tolist(), rating_311_1617[\"Number of Incidence\"].tolist(), color = \"blue\", label = \"311\")\n",
    "plt.plot(rating_311_1617[\"Month\"].tolist(), rating_311_1617[\"Approve Rate\"].tolist(), color = \"red\", label = \"rating\")\n",
    "plt.legend()\n",
    "plt.xlabel('Month')\n",
    "plt.ylabel('Number of incidence')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Correlation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Approve Rate</th>\n",
       "      <th>Disapprove Rate</th>\n",
       "      <th>Number of Incidence</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Approve Rate</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.990669</td>\n",
       "      <td>-0.498614</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Disapprove Rate</th>\n",
       "      <td>-0.990669</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.505769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Number of Incidence</th>\n",
       "      <td>-0.498614</td>\n",
       "      <td>0.505769</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     Approve Rate  Disapprove Rate  Number of Incidence\n",
       "Approve Rate             1.000000        -0.990669            -0.498614\n",
       "Disapprove Rate         -0.990669         1.000000             0.505769\n",
       "Number of Incidence     -0.498614         0.505769             1.000000"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "correlation_311_rating = rating_311_1617.corr(method='pearson')\n",
    "correlation_311_rating"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
